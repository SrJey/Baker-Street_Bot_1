import os
import logging
from datetime import time, date, datetime, timedelta
from io import BytesIO

import qrcode
import pandas as pd
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import database as db

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_TELEGRAM_ID = os.getenv('ADMIN_TELEGRAM_ID')
TIMEZONE = pytz.timezone('Europe/Moscow') # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–ª–æ–Ω–∞ –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ.'
    )

async def handle_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∫–æ–¥."""
    user_code = update.message.text.strip()
    chat_id = update.message.chat_id
    now = datetime.now(TIMEZONE)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Å 9:00 –¥–æ 18:00)
    if not (time(9, 0) <= now.time() <= time(18, 0)):
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å 9:00 –¥–æ 18:00.')
        return

    # 2. –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    employee = db.get_employee_by_code(user_code)
    if not employee:
        await update.message.reply_text('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    employee_id, employee_name, _ = employee

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ç–∞–ª–æ–Ω —Å–µ–≥–æ–¥–Ω—è
    if db.check_if_ticket_granted_today(employee_id):
        await update.message.reply_text('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π —Ç–∞–ª–æ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∏–π —Ç–∞–ª–æ–Ω –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≤—Ç—Ä–∞.')
        return

    # 4. –í—ã–¥–∞—á–∞ —Ç–∞–ª–æ–Ω–∞
    db.grant_ticket(employee_id)
    logger.info(f"–í—ã–¥–∞–Ω —Ç–∞–ª–æ–Ω –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}")

    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–ª–æ–Ω–∞ —Å QR-–∫–æ–¥–æ–º
    ticket_text = (
        f"‚úÖ –¢–∞–ª–æ–Ω –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ\n\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}\n"
        f"–î–∞—Ç–∞: {now.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è –≤—ã–¥–∞—á–∏: {now.strftime('%H:%M:%S')}\n\n"
        f"–≠—Ç–æ—Ç —Ç–∞–ª–æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    )

    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr_img = qrcode.make(ticket_text)
    bio = BytesIO()
    bio.name = 'ticket_qr.png'
    qr_img.save(bio, 'PNG')
    bio.seek(0)

    await context.bot.send_photo(
        chat_id=chat_id,
        photo=bio,
        caption=ticket_text
    )

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ---

async def send_daily_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    report_data = db.get_daily_report()
    today_str = date.today().strftime('%d.%m.%Y')

    if not report_data:
        message = f"üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {today_str}\n\n–°–µ–≥–æ–¥–Ω—è —Ç–∞–ª–æ–Ω—ã –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–ª."
    else:
        message = f"üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {today_str}\n\n"
        message += f"–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤: {len(report_data)}\n\n"
        message += "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        for i, (name, time_issued) in enumerate(report_data, 1):
            message += f"{i}. {name} - {time_issued.strftime('%H:%M:%S')}\n"

    await context.bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=message)
    logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


async def send_monthly_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ Excel —Ñ–∞–π–ª–∞."""
    logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    today = date.today()
    # –û—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    first_day_of_current_month = today.replace(day=1)
    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)
    month = last_day_of_previous_month.month
    year = last_day_of_previous_month.year
    
    report_data = db.get_monthly_report(month, year)

    if not report_data:
        message = f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {month:02}.{year}: —Ç–∞–ª–æ–Ω—ã –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å."
        await context.bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=message)
        logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç (–ø—É—Å—Ç–æ–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    df = pd.DataFrame(report_data, columns=['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '–î–∞—Ç–∞', '–í—Ä–µ–º—è'])
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    
    output.seek(0)
    
    file_name = f"monthly_report_{month:02}_{year}.xlsx"
    caption = f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {last_day_of_previous_month.strftime('%B %Y')}"

    await context.bot.send_document(
        chat_id=ADMIN_TELEGRAM_ID,
        document=output,
        filename=file_name,
        caption=caption
    )
    logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.init_db()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    job_queue = application.job_queue
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 18:10
    job_queue.run_daily(send_daily_report, time=time(18, 10, 0, tzinfo=TIMEZONE))
    # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç 1-–≥–æ —á–∏—Å–ª–∞ –≤ 9:00
    job_queue.run_monthly(send_monthly_report, when=time(9, 0, 0, tzinfo=TIMEZONE), day=1)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_code))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
